<?php

namespace App\Http\Controllers;

use App\CofInfo;
use App\Http\Requests\TransactionRequest;
use App\Models\Bill;
use App\Models\Package;
use App\Models\Transaction;
use App\Models\User;
use App\Models\VendorBill;
use App\mpgHttpsPost;
use App\mpgRequest;
use App\mpgTransaction;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use Mail;

class TransactionController extends Controller
{
    public $VIEW = 'transactions';
    public $TITLE = 'Deposit Funds';
    public $URL = 'transactions';
    public $SRC = 'images/transactions/';

    public function __construct()
    {

        view()->share([
            'title' => $this->TITLE,
            'url' => url($this->URL),
        ]);
    }
public function history()
{
    return view('transactions.logs');
}
    public function index(Request $request)
    {
        if ($request->ajax() && $request->table) {
            return $this->getRecords($request);
        }
        return view($this->VIEW . '.index');
    }

    public function getRecords($request)
    {
        $user = auth()->user();
        $records = Transaction::where(function ($q) use ($user) {
            if (!$user->hasRole('admin')) {
                $q->where('receiver_id', $user->id)
                    ->orWhere('sender_id', $user->id);
            }
        })
            ->latest()
            ->get();

        return DataTables::of($records)
            ->editColumn('created_at', function ($record) {
                return $record->createdAt();
            })
            ->editColumn('amount', function ($record) {
                return $record->amount();
            })
            ->addColumn('actions', function ($record) {
                $url = $this->URL;
                $delete_url = $url . '/' . $record->id;
                return '';
            })
            ->rawColumns(['actions', 'image'])
            ->setTotalRecords($records->count())
            ->make(true);

    }

    public function create()
    {
//        if (!auth()->user()->hasRole('admin')) {
//            abort(404);
//        }


//        if (request('step') == 2 && !session('fund_amount')) {
//            abort(422);
//        }

        return view($this->VIEW . '.create', [
        ]);

    }

    public function getFundAmount(Request $request)
    {

    }

    public function store(Request $request)
    {
        if (request('step') == 1) {
            session('fund_amount', request('amount'));
            return response()
                ->json([
                    'toast' => [
                        'heading' => 'Message',
                        'message' => 'Please Enter Card Detail',
                        'type' => 'success',
                    ]
                ]);
        }

        if ($request->step == 2) {
            ##
            ## Example php -q TestPurchase.php store1
            ##
            /**************************** Request Variables *******************************/
            $store_id = env('MONERIS_STORE_ID');
            $api_token = env('MONERIS_API_TOKEN');
            /************************* Transactional Variables ****************************/
            $type = 'purchase';
            $cust_id = 'cust id';
            $order_id = 'ord-' . date("dmy-G:i:s");
            $amount = number_format($request->amount, 2, '.', '');
            $pan = $request->card_number;
            $expiry_date = date('ym', strtotime($request->card_expiry));
            $crypt = '7';
            $dynamic_descriptor = '123';
            $status_check = 'false';

            /*********************** Transactional Associative Array **********************/
            $txnArray = array('type' => $type,
                'order_id' => $order_id,
                'cust_id' => $cust_id,
                'amount' => $amount,
                'pan' => $pan,
                'expdate' => $expiry_date,
                'crypt_type' => $crypt,
                'dynamic_descriptor' => $dynamic_descriptor
                //,'wallet_indicator' => '' //Refer to documentation for details
                //,'cm_id' => '8nAK8712sGaAkls56' //set only for usage with Offlinx - Unique max 50 alphanumeric characters transaction id generated by merchant
            );
            /**************************** Transaction Object *****************************/
            $mpgTxn = new mpgTransaction($txnArray);
            /******************* Credential on File **********************************/
            $cof = new CofInfo();
            $cof->setPaymentIndicator("U");
            $cof->setPaymentInformation("2");
            $cof->setIssuerId("168451306048014");
            $mpgTxn->setCofInfo($cof);
            /****************************** Request Object *******************************/
            $mpgRequest = new mpgRequest($mpgTxn);
            $mpgRequest->setProcCountryCode("CA"); //"US" for sending transaction to US environment
            $mpgRequest->setTestMode(true); //false or comment out this line for production transactions
            /***************************** HTTPS Post Object *****************************/
            /* Status Check Example
            $mpgHttpPost  =new mpgHttpsPostStatus($store_id,$api_token,$status_check,$mpgRequest);
            */
            $mpgHttpPost = new mpgHttpsPost($store_id, $api_token, $mpgRequest);
            /******************************* Response ************************************/
            $mpgResponse = $mpgHttpPost->getMpgResponse();
//            dd($mpgResponse);
//            if ($mpgResponse->getCardType()){
//                abort(422,'Card Number is not correct');
//            }

//            print("\nCardType = " . $mpgResponse->getCardType());
//            print("\nTransAmount = " . $mpgResponse->getTransAmount());
//            print("\nTxnNumber = " . $mpgResponse->getTxnNumber());
//            print("\nReceiptId = " . $mpgResponse->getReceiptId());
//            print("\nTransType = " . $mpgResponse->getTransType());
//            print("\nReferenceNum = " . $mpgResponse->getReferenceNum());
//            print("\nResponseCode = " . $mpgResponse->getResponseCode());
//            print("\nISO = " . $mpgResponse->getISO());
//            print("\nMessage = " . $mpgResponse->getMessage());
//            print("\nIsVisaDebit = " . $mpgResponse->getIsVisaDebit());
//            print("\nAuthCode = " . $mpgResponse->getAuthCode());
//            print("\nComplete = " . $mpgResponse->getComplete());
//            print("\nTransDate = " . $mpgResponse->getTransDate());
//            print("\nTransTime = " . $mpgResponse->getTransTime());
//            print("\nTicket = " . $mpgResponse->getTicket());
//            print("\nTimedOut = " . $mpgResponse->getTimedOut());
//            print("\nStatusCode = " . $mpgResponse->getStatusCode());
//            print("\nStatusMessage = " . $mpgResponse->getStatusMessage());
//            print("\nHostId = " . $mpgResponse->getHostId());
//            print("\nIssuerId = " . $mpgResponse->getIssuerId());

            if ($mpgResponse->getResponseCode() && $mpgResponse->getResponseCode() <= 50) {
                $user = auth()->user();

                $data = $request->only('amount');
                $data['receiver_id'] = $user->id;
                $data['receiver_email'] = $user->email;
                $data['date'] = date('Y-m-d');
                $amount = $request->amount;
                $data['response1'] = $mpgResponse->getReferenceNum();
                $data['response2'] = $mpgResponse->getTxnNumber();
                $data['response2'] = $mpgResponse->getResponseCode();
                $record = Transaction::create($data);
                $user->investment += $amount;

                if ($request->title == 'add_funds') {
                    $user->balance += $amount;
                    $record->remarks = 'Personal Fund';
                }

                if ($request->title == 'pay_lender') {
                    $record->remarks = 'Pay Lender';
                    $user->pay_to_lender += $amount;
                }

                $record->save();
                $user->save();
                $email = $user->email;
                if ($request->title == 'add_funds') {
                    Mail::send('emails.deposit', [], function ($message) use ($request, $email) {
                        $message->to($email)
                            ->subject('Deposit Confirmation');
                    });
                } elseif ($request->title == 'pay_lender') {
                    Mail::send('emails.lender-deposit', [], function ($message) use ($request, $email) {
                        $message->to($email)
                            ->cc('info@zeropayd.com')
                            ->subject('Lender Payment Confirmation');
                    });
                }

                return response()
                    ->json([
                        'toast' => [
                            'heading' => 'Message',
                            'message' => $request->title . ' has been saved',
                            'type' => 'success',
                        ]
                    ]);
            } else {
                abort(422, $mpgResponse->getMessage());
            }

        }

//        abort(422,'We are working on deposit Funds Module');
//        if (!auth()->user()->hasRole('admin')) {
//            abort(404);
//        }

//        $receiver_email = $request->receiver_email;
//
//        $user = User::where('email', $receiver_email)->first();
//
//        if (!$user) {
//            abort(422, 'User Email not exist');
//        }
//
//        $user_role = $request->user_role;
//        $to_account = $request->to_account;
//
//        if ($user_role == 'user') {
//            if (!$user->hasRole('user')) {
//                abort(422, 'Incorrect user email');
//            }
//        } elseif ($user_role == 'lender') {
//            if (!$user->hasRole('lender')) {
//                abort(422, 'Incorrect lender email');
//            }
//        } else {
//            abort(422);
//        }
//
//        $data = $request->all();
//        $data['receiver_id'] = $user->id;
//        $amount = $request->amount;
//        Transaction::create($data);
//        $user->balance += $amount;
//        $user->investment += $amount;
//        $user->save();

//        return response()
//            ->json([
//                'toast' => [
//                    'heading' => 'Message',
//                    'message' => $this->TITLE . ' is saved',
//                    'type' => 'success',
//                ]
//            ]);
    }

    public function show($id)
    {
//        return view($this->VIEW . '.show', [
//            'record' => Lead::with('details.product')->findOrFail($id),
//        ]);
    }

    public function edit($id)
    {
        abort(404);
        $record = Package::findOrFail($id);
        return view($this->VIEW . '.edit', [
            'record' => $record,
        ]);
    }

    public function update(Request $request, $id)
    {
        abort(404);
        $record = Package::findOrFail($id);
        $data = $request->except('file');
        $record->update($data);
        return redirect($this->URL)
            ->with([
                'toast' => [
                    'heading' => 'Message',
                    'message' => $this->TITLE . ' is updated',
                    'type' => 'success',
                ]
            ]);
    }

    public function destroy($id)
    {
        abort(404);
        $record = Package::findOrFail($id);
        $record->delete();

        return [
            'toast' => [
                'heading' => 'Message',
                'message' => $this->TITLE . ' is deleted',
                'type' => 'success',
            ]
        ];
    }

}
