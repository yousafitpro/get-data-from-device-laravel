<?php

namespace App\Http\Controllers\Api;

use App\CofInfo;
use App\Http\Controllers\Controller;
use App\Models\Transaction;
use App\Models\User;
use App\mpgHttpsPost;
use App\mpgRequest;
use App\mpgTransaction;
use Illuminate\Http\Request;
use Mail;

class TransactionController extends Controller
{

    public function index(Request $request)
    {
        $user_id = $request->user_id;
        return response()->json([
            'error' => 'no',
            'message' => 'success',
            'record' => Transaction::where('receiver_id', $user_id)
                ->latest()
                ->get()
        ]);
    }

    public function store(Request $request)
    {

        ##
        ## Example php -q TestPurchase.php store1
        ##
        /**************************** Request Variables *******************************/
        $store_id = env('MONERIS_STORE_ID');
        $api_token = env('MONERIS_API_TOKEN');
        /************************* Transactional Variables ****************************/
        $type = 'purchase';
        $cust_id = 'cust id';
        $order_id = 'ord-' . date("dmy-G:i:s");
        $amount = number_format($request->amount, 2, '.', '');
        $pan = $request->card_number;
        $expiry_date = date('ym', strtotime($request->card_expiry));
        $crypt = '7';
        $dynamic_descriptor = '123';
        $status_check = 'false';

        /*********************** Transactional Associative Array **********************/
        $txnArray = array('type' => $type,
            'order_id' => $order_id,
            'cust_id' => $cust_id,
            'amount' => $amount,
            'pan' => $pan,
            'expdate' => $expiry_date,
            'crypt_type' => $crypt,
            'dynamic_descriptor' => $dynamic_descriptor
            //,'wallet_indicator' => '' //Refer to documentation for details
            //,'cm_id' => '8nAK8712sGaAkls56' //set only for usage with Offlinx - Unique max 50 alphanumeric characters transaction id generated by merchant
        );
        /**************************** Transaction Object *****************************/
        $mpgTxn = new mpgTransaction($txnArray);
        /******************* Credential on File **********************************/
        $cof = new CofInfo();
        $cof->setPaymentIndicator("U");
        $cof->setPaymentInformation("2");
        $cof->setIssuerId("168451306048014");
        $mpgTxn->setCofInfo($cof);
        /****************************** Request Object *******************************/
        $mpgRequest = new mpgRequest($mpgTxn);
        $mpgRequest->setProcCountryCode("CA"); //"US" for sending transaction to US environment
        $mpgRequest->setTestMode(true); //false or comment out this line for production transactions
        /***************************** HTTPS Post Object *****************************/
        /* Status Check Example
        $mpgHttpPost  =new mpgHttpsPostStatus($store_id,$api_token,$status_check,$mpgRequest);
        */
        $mpgHttpPost = new mpgHttpsPost($store_id, $api_token, $mpgRequest);
        /******************************* Response ************************************/
        $mpgResponse = $mpgHttpPost->getMpgResponse();

        if ($mpgResponse->getResponseCode() && $mpgResponse->getResponseCode() <= 50) {
            $user = User::find($request->user_id);

            $data = $request->only('amount');
            $data['receiver_id'] = $user->id;
            $data['receiver_email'] = $user->email;
            $data['date'] = date('Y-m-d');
            $amount = $request->amount;
            $data['response1'] = $mpgResponse->getReferenceNum();
            $data['response2'] = $mpgResponse->getTxnNumber();
            $data['response2'] = $mpgResponse->getResponseCode();
            $record = Transaction::create($data);
            $user->investment += $amount;

            if ($request->title == 'add_funds') {
                $user->balance += $amount;
                $record->remarks = 'Personal Fund';
            }

            if ($request->title == 'pay_lender') {
                $record->remarks = 'Pay Lender';
                $user->pay_to_lender += $amount;
            }

            $record->save();
            $user->save();
            $email = $user->email;
            if ($request->title == 'add_funds') {
                Mail::send('emails.deposit', [], function ($message) use ($request, $email) {
                    $message->to($email)
                        ->subject('Deposit Confirmation');
                });
            } elseif ($request->title == 'pay_lender') {
                Mail::send('emails.lender-deposit', [], function ($message) use ($request, $email) {
                    $message->to($email)
                        ->cc('info@zeropayd.com')
                        ->subject('Lender Payment Confirmation');
                });
            }

            return response()->json([
                'error' => 'no',
                'message' => str_replace('_', ' ', $request->title) . ' has been saved',
            ]);

        } else {

            return response()->json([
                'error' => 'yes',
                'message' => $mpgResponse->getMessage(),
            ]);

        }
    }
}
